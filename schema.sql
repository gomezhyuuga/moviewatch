-- MySQL Script generated by MySQL Workbench
-- Wed May 13 02:46:37 2015
-- Model: New Model    Version: 1.0
-- MySQL Workbench Forward Engineering

SET @OLD_UNIQUE_CHECKS=@@UNIQUE_CHECKS, UNIQUE_CHECKS=0;
SET @OLD_FOREIGN_KEY_CHECKS=@@FOREIGN_KEY_CHECKS, FOREIGN_KEY_CHECKS=0;
SET @OLD_SQL_MODE=@@SQL_MODE, SQL_MODE='TRADITIONAL,ALLOW_INVALID_DATES';

-- -----------------------------------------------------
-- Schema moviewatch
-- -----------------------------------------------------
DROP SCHEMA IF EXISTS `moviewatch` ;

-- -----------------------------------------------------
-- Schema moviewatch
-- -----------------------------------------------------
CREATE SCHEMA IF NOT EXISTS `moviewatch` DEFAULT CHARACTER SET utf8 ;
USE `moviewatch` ;

-- -----------------------------------------------------
-- Table `moviewatch`.`Film`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `moviewatch`.`Film` ;

CREATE TABLE IF NOT EXISTS `moviewatch`.`Film` (
  `idFilm` INT NOT NULL AUTO_INCREMENT,
  `name` VARCHAR(100) NULL,
  `genre` VARCHAR(45) NULL,
  `rating` FLOAT NULL,
  `description` TEXT NULL,
  `releaseDate` DATE NULL,
  `director` VARCHAR(200) NULL,
  `duration` INT NULL,
  `filepath` VARCHAR(200) NULL,
  `poster` VARCHAR(200) NULL DEFAULT 'no_poster.png',
  PRIMARY KEY (`idFilm`))
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `moviewatch`.`Country`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `moviewatch`.`Country` ;

CREATE TABLE IF NOT EXISTS `moviewatch`.`Country` (
  `idCountry` INT NOT NULL AUTO_INCREMENT,
  `name` VARCHAR(45) NULL,
  `continent` VARCHAR(45) NULL,
  PRIMARY KEY (`idCountry`))
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `moviewatch`.`Account`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `moviewatch`.`Account` ;

CREATE TABLE IF NOT EXISTS `moviewatch`.`Account` (
  `idAccount` INT NOT NULL AUTO_INCREMENT,
  `idCountry` INT NULL,
  `username` VARCHAR(45) NULL,
  `firstName` VARCHAR(45) NULL,
  `lastName` VARCHAR(45) NULL,
  `email` VARCHAR(45) NULL,
  `address` VARCHAR(45) NULL,
  `memberSince` DATE NULL,
  `password` VARCHAR(100) NULL,
  `user_id` INT NULL,
  PRIMARY KEY (`idAccount`),
  INDEX `fk_country_idx` (`idCountry` ASC),
  UNIQUE INDEX `user_id_UNIQUE` (`user_id` ASC),
  CONSTRAINT `fk_country`
    FOREIGN KEY (`idCountry`)
    REFERENCES `moviewatch`.`Country` (`idCountry`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `moviewatch`.`UserRating`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `moviewatch`.`UserRating` ;

CREATE TABLE IF NOT EXISTS `moviewatch`.`UserRating` (
  `idRating` INT NOT NULL AUTO_INCREMENT,
  `idAccount` INT NOT NULL,
  `idFilm` INT NOT NULL,
  `rating` INT NULL,
  INDEX `fk_film_idx` (`idFilm` ASC),
  INDEX `fk_account_idx` (`idAccount` ASC),
  PRIMARY KEY (`idRating`),
  UNIQUE INDEX `rat` (`idAccount` ASC, `idFilm` ASC),
  CONSTRAINT `fk_film`
    FOREIGN KEY (`idFilm`)
    REFERENCES `moviewatch`.`Film` (`idFilm`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_account`
    FOREIGN KEY (`idAccount`)
    REFERENCES `moviewatch`.`Account` (`idAccount`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `moviewatch`.`Catalog`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `moviewatch`.`Catalog` ;

CREATE TABLE IF NOT EXISTS `moviewatch`.`Catalog` (
  `idCatalog` INT NOT NULL AUTO_INCREMENT,
  `name` VARCHAR(45) NULL,
  PRIMARY KEY (`idCatalog`))
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `moviewatch`.`FilmCatalog`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `moviewatch`.`FilmCatalog` ;

CREATE TABLE IF NOT EXISTS `moviewatch`.`FilmCatalog` (
  `id` INT NOT NULL AUTO_INCREMENT,
  `idFilm` INT NOT NULL,
  `idCatalog` INT NOT NULL,
  PRIMARY KEY (`id`),
  INDEX `fk_film_catalog_idx` (`idFilm` ASC),
  INDEX `fk_catalog_for_film_idx` (`idCatalog` ASC),
  CONSTRAINT `fk_film_catalog`
    FOREIGN KEY (`idFilm`)
    REFERENCES `moviewatch`.`Film` (`idFilm`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_catalog_for_film`
    FOREIGN KEY (`idCatalog`)
    REFERENCES `moviewatch`.`Catalog` (`idCatalog`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `moviewatch`.`AmericanCatalog`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `moviewatch`.`AmericanCatalog` ;

CREATE TABLE IF NOT EXISTS `moviewatch`.`AmericanCatalog` (
  `idFilm` INT NOT NULL AUTO_INCREMENT,
  `name` VARCHAR(100) NULL,
  `genre` VARCHAR(45) NULL,
  `rating` FLOAT NULL,
  `description` TEXT NULL,
  `releaseDate` DATE NULL,
  `director` VARCHAR(200) NULL,
  `duration` INT NULL,
  `filepath` VARCHAR(200) NULL,
  `poster` VARCHAR(200) NULL DEFAULT 'no_poster.png',
  PRIMARY KEY (`idFilm`))
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `moviewatch`.`AmericanAccount`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `moviewatch`.`AmericanAccount` ;

CREATE TABLE IF NOT EXISTS `moviewatch`.`AmericanAccount` (
  `idAccount` INT NOT NULL AUTO_INCREMENT,
  `idCountry` INT NULL,
  `username` VARCHAR(45) NULL,
  `firstName` VARCHAR(45) NULL,
  `lastName` VARCHAR(45) NULL,
  `email` VARCHAR(45) NULL,
  `address` VARCHAR(45) NULL,
  `memberSince` DATE NULL,
  `password` VARCHAR(45) NULL,
  `user_id` INT NULL,
  PRIMARY KEY (`idAccount`),
  INDEX `fk_country_idx` (`idCountry` ASC),
  UNIQUE INDEX `user_id_UNIQUE` (`user_id` ASC),
  CONSTRAINT `fk_country_amcat`
    FOREIGN KEY (`idCountry`)
    REFERENCES `moviewatch`.`Country` (`idCountry`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `moviewatch`.`AsianAccount`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `moviewatch`.`AsianAccount` ;

CREATE TABLE IF NOT EXISTS `moviewatch`.`AsianAccount` (
  `idAccount` INT NOT NULL AUTO_INCREMENT,
  `idCountry` INT NULL,
  `username` VARCHAR(45) NULL,
  `firstName` VARCHAR(45) NULL,
  `lastName` VARCHAR(45) NULL,
  `email` VARCHAR(45) NULL,
  `address` VARCHAR(45) NULL,
  `memberSince` DATE NULL,
  `password` VARCHAR(45) NULL,
  `user_id` INT NULL,
  PRIMARY KEY (`idAccount`),
  INDEX `fk_country_idx` (`idCountry` ASC),
  UNIQUE INDEX `user_id_UNIQUE` (`user_id` ASC),
  CONSTRAINT `fk_country_asac`
    FOREIGN KEY (`idCountry`)
    REFERENCES `moviewatch`.`Country` (`idCountry`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `moviewatch`.`EuropeanAccount`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `moviewatch`.`EuropeanAccount` ;

CREATE TABLE IF NOT EXISTS `moviewatch`.`EuropeanAccount` (
  `idAccount` INT NOT NULL AUTO_INCREMENT,
  `idCountry` INT NULL,
  `username` VARCHAR(45) NULL,
  `firstName` VARCHAR(45) NULL,
  `lastName` VARCHAR(45) NULL,
  `email` VARCHAR(45) NULL,
  `address` VARCHAR(45) NULL,
  `memberSince` DATE NULL,
  `password` VARCHAR(45) NULL,
  `user_id` INT NULL,
  PRIMARY KEY (`idAccount`),
  INDEX `fk_country_idx` (`idCountry` ASC),
  UNIQUE INDEX `user_id_UNIQUE` (`user_id` ASC),
  CONSTRAINT `fk_country_euac`
    FOREIGN KEY (`idCountry`)
    REFERENCES `moviewatch`.`Country` (`idCountry`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `moviewatch`.`EuropeanAccount`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `moviewatch`.`EuropeanAccount` ;

CREATE TABLE IF NOT EXISTS `moviewatch`.`EuropeanAccount` (
  `idAccount` INT NOT NULL AUTO_INCREMENT,
  `idCountry` INT NULL,
  `username` VARCHAR(45) NULL,
  `firstName` VARCHAR(45) NULL,
  `lastName` VARCHAR(45) NULL,
  `email` VARCHAR(45) NULL,
  `address` VARCHAR(45) NULL,
  `memberSince` DATE NULL,
  `password` VARCHAR(45) NULL,
  `user_id` INT NULL,
  PRIMARY KEY (`idAccount`),
  INDEX `fk_country_idx` (`idCountry` ASC),
  UNIQUE INDEX `user_id_UNIQUE` (`user_id` ASC),
  CONSTRAINT `fk_country_euac`
    FOREIGN KEY (`idCountry`)
    REFERENCES `moviewatch`.`Country` (`idCountry`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `moviewatch`.`AsianCatalog`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `moviewatch`.`AsianCatalog` ;

CREATE TABLE IF NOT EXISTS `moviewatch`.`AsianCatalog` (
  `idFilm` INT NOT NULL AUTO_INCREMENT,
  `name` VARCHAR(100) NULL,
  `genre` VARCHAR(45) NULL,
  `rating` FLOAT NULL,
  `description` TEXT NULL,
  `releaseDate` DATE NULL,
  `director` VARCHAR(200) NULL,
  `duration` INT NULL,
  `filepath` VARCHAR(200) NULL,
  `poster` VARCHAR(200) NULL DEFAULT 'no_poster.png',
  PRIMARY KEY (`idFilm`))
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `moviewatch`.`EuropeanCatalog`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `moviewatch`.`EuropeanCatalog` ;

CREATE TABLE IF NOT EXISTS `moviewatch`.`EuropeanCatalog` (
  `idFilm` INT NOT NULL AUTO_INCREMENT,
  `name` VARCHAR(100) NULL,
  `genre` VARCHAR(45) NULL,
  `rating` FLOAT NULL,
  `description` TEXT NULL,
  `releaseDate` DATE NULL,
  `director` VARCHAR(200) NULL,
  `duration` INT NULL,
  `filepath` VARCHAR(200) NULL,
  `poster` VARCHAR(200) NULL DEFAULT 'no_poster.png',
  PRIMARY KEY (`idFilm`))
ENGINE = InnoDB;

USE `moviewatch` ;

-- -----------------------------------------------------
-- procedure setNewRating
-- -----------------------------------------------------

USE `moviewatch`;
DROP procedure IF EXISTS `moviewatch`.`setNewRating`;

DELIMITER $$
USE `moviewatch`$$
CREATE PROCEDURE `setNewRating`(idFIlm int, newRank float)
BEGIN
	update Film
    set Film.rating = newRank
    where Film.idFilm = idFilm;
END
$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure copyFilmToCatalog
-- -----------------------------------------------------

USE `moviewatch`;
DROP procedure IF EXISTS `moviewatch`.`copyFilmToCatalog`;

DELIMITER $$
USE `moviewatch`$$
CREATE PROCEDURE `copyFilmToCatalog` (p_film_id int, p_destiny int)
BEGIN
if (p_destiny = 1) then #AmericanCatalog
			insert into AmericanCatalog (idFilm, name, genre, rating, description, releaseDate, director, duration, filepath, poster) 
            select idFilm, name, genre, rating, description, releaseDate, director, duration, filepath, poster
            from Film
            where p_film_id = Film.idFilm;
        
        elseif (p_destiny = 2) then #EuropeanCatalog
			insert into EuropeanCatalog (idFilm, name, genre, rating, description, releaseDate, director, duration, filepath, poster) 
            select idFilm, name, genre, rating, description, releaseDate, director, duration, filepath, poster
            from Film
            where p_film_id = Film.idFilm;
            
		else
			insert into AsianCatalog (idFilm, name, genre, rating, description, releaseDate, director, duration, filepath, poster) 
            select idFilm, name, genre, rating, description, releaseDate, director, duration, filepath, poster
            from Film
            where p_film_id = Film.idFilm;
        
        #else #AsianCatalog
        
        END IF;
END
$$

DELIMITER ;
USE `moviewatch`;

DELIMITER $$

USE `moviewatch`$$
DROP TRIGGER IF EXISTS `moviewatch`.`Film_AFTER_DELETE` $$
USE `moviewatch`$$
CREATE DEFINER = CURRENT_USER TRIGGER `moviewatch`.`Film_AFTER_DELETE` AFTER DELETE ON `Film` FOR EACH ROW
BEGIN
	DELETE from AmericanCatalog where AmericanCatalog.idFilm = OLD.idFilm;
	DELETE from EuropeanCatalog where AmericanCatalog.idFilm = OLD.idFilm;
	DELETE from AsianCatalog where AmericanCatalog.idFilm = OLD.idFilm;
END
$$


USE `moviewatch`$$
DROP TRIGGER IF EXISTS `moviewatch`.`UserRating_AFTER_INSERT` $$
USE `moviewatch`$$
CREATE DEFINER = CURRENT_USER TRIGGER `moviewatch`.`UserRating_AFTER_INSERT` AFTER INSERT ON `UserRating` FOR EACH ROW
BEGIN

    DECLARE movieAverage double;
    
    SELECT AVG(rating) into movieAverage
    from UserRating
    where (new.idFilm = UserRating.idFilm);
    
    call SetNewRating(NEW.idFilm, movieAverage);
END
$$


USE `moviewatch`$$
DROP TRIGGER IF EXISTS `moviewatch`.`FilmCatalog_AFTER_INSERT` $$
USE `moviewatch`$$
CREATE DEFINER = CURRENT_USER TRIGGER `moviewatch`.`FilmCatalog_AFTER_INSERT` AFTER INSERT ON `FilmCatalog` FOR EACH ROW
BEGIN
	
END
$$


USE `moviewatch`$$
DROP TRIGGER IF EXISTS `moviewatch`.`FilmCatalog_AFTER_DELETE` $$
USE `moviewatch`$$
CREATE DEFINER=`root`@`%` TRIGGER `moviewatch`.`FilmCatalog_AFTER_DELETE` AFTER DELETE ON `FilmCatalog` FOR EACH ROW
BEGIN
	IF (OLD.idCatalog = 1) THEN
		DELETE from AmericanCatalog where AmericanCatalog.idFilm = OLD.idFilm;
	ELSEIF (OLD.idCatalog = 2) THEN
		DELETE from EuropeanCatalog where EuropeanCatalog.idFilm = OLD.idFilm;
	ELSE
		DELETE from AsianCatalog where AsianCatalog.idFilm = OLD.idFilm;
	END IF;
END$$


DELIMITER ;
SET SQL_MODE = '';
GRANT USAGE ON *.* TO appuser;
 DROP USER appuser;
SET SQL_MODE='TRADITIONAL,ALLOW_INVALID_DATES';
CREATE USER 'appuser' IDENTIFIED BY '1234';

GRANT ALL ON `moviewatch`.* TO 'appuser';

SET SQL_MODE=@OLD_SQL_MODE;
SET FOREIGN_KEY_CHECKS=@OLD_FOREIGN_KEY_CHECKS;
SET UNIQUE_CHECKS=@OLD_UNIQUE_CHECKS;
